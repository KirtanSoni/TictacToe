#define MaT 3
#define IQ 6 // how many steps in future (1-8) 

typedef struct node{
 int data;
 int depth;
 struct node (*child)[9-depth]; 
}node;



int checkWin(int board)
{
    if(board[0][0]==board[0][1]&&board[0][0]==board[0][2])      //horizontal series
        return board[0][0];
    else if(board[1][0]==board[1][1]&&board[1][0]==board[1][2])
        return board[1][0];
    else if(board[2][0]==board[2][1]&&board[2][0]==board[2][2])
        return board[2][0];

    
    else if(board[1][0]==board[2][0]&&board[1][0]==board[0][0]) //vertical series
        return board[1][0];
    else if(board[1][1]==board[2][1]&&board[1][1]==board[0][1])
        return board[1][1];
    else if(board[1][2]==board[2][2]&&board[1][2]==board[0][2])
        return board[1][2];
    
    else if(board[0][0]==board[1][1]&&board[1][1]==board[2][2]) //cross series
        return board[1][1];
    else if(board[0][2]==board[1][1]&&board[1][1]==board[2][0])
        return board[1][0];
}

int cost(int **board)
{
    
}

void initNode(node *new, int depth)
{

}

void createTree(int **board,)
{

}
int main()
{
    int board[MaT][MaT];
    
}

int minMax(int , int player ,Tree)
{

}